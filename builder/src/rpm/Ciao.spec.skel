## This is the build specification template for Ciao RPM packages.
##
## %files, %post, %preun sections must be up to date with Ciao

## Copyright © 2007 José Luis González / The CLIP Group
## Facultad de Informática, Universidad Politécnica de Madrid.


########################################################################

## Switches controlling features/behaviour of RPM generation.
## These can be set from the rpmbuild command line and
## *** MUST both be declared with ciaorpm_opttype/2 and listed into
## rpm_options/1 in gen_pbundle__rpm.pl ***

## Defaults are provided here for those not explicitly set outside:

# Build a vendor-independent package? (installable in all RPM distros) (1/0)
# (If 0 the package will be vendor-dependent for the build distro, and paths
#  options must be set explicitly if they differ from defaults - see below.)
%if %{!?vendor_independent:1}0
%define vendor_independent 1
%endif


## Vendor-dependent paths/filenames (we default to Fedora/Redhat):

%if %{!?install_info_cmd:1}0
# So far this is the same in all mainstream RPM-based linux distributions:
%define install_info_cmd /sbin/install-info
%endif
# Debian (and derivatives):
#define install_info_cmd /usr/sbin/install-info

%if %{!?emacs_sitestart_dir:1}0
# Fedora/RedHat:
%define emacs_sitestart_dir %{_datadir}/emacs/site-lisp/site-start.d
%endif
# SuSE (requires suse-start-*.el):
#define emacs_sitestart_dir %{_datadir}/emacs/site-lisp/
# Mandriva, Debian, etc:
#define emacs_sitestart_dir /etc/emacs/site-start.d
#
# Since we want a single RPM package that works everywhere, the pre/postun
# scripts take care of copying ciao-mode-init.el in non Fedora/RedHat systems.

%if %{!?emacs_sitestart_filename:1}0
# Fedora/RedHat, Mandriva, etc.:
%define emacs_sitestart_filename ciao-mode-init.el
%endif
# *SuSE (requires suse-start-*.el):
#define emacs_sitestart_filename suse-start-ciao.el
# Debian (and Ubuntu, etc.), requires a prefix number for loading order:
#define emacs_sitestart_filename 50ciao-mode-init.el

## Ciao project details:

# Ciao's subversion repository directory name
%if %{!?repo_dirname:1}0
%define repo_dirname Ciao
%endif

# Ciao's subversion repository URI (for doing checkout)
%if %{!?repo_uri:1}0
%define repo_uri file:///home/clip/SvnReps/Systems/CiaoDE/trunk
%endif

# Ciao bibliography's subversion repository directory name
%if %{!?bibrepo_dirname:1}0
%define bibrepo_dirname %{repo_dirname}/bibtex_clip
%endif

# Ciao bibliography's subversion repository URI (for doing checkout)
%if %{!?bibrepo_uri:1}0
%define bibrepo_uri file:///home/clip/SvnReps/bibtex/clip
%endif

########################################################################

Summary: The Ciao Prolog development environment
Name: Ciao
Version: {{Version}}
Release: {{Release}}
License: LGPL (Ciao) / GPL (CiaoPP, lpdoc)
Vendor: CLIP Lab
Group: Development/Languages
URL: http://ciao-lang.org
Packager: Ciao Dev. Team <ciao@clip.dia.fi.upm.es>
Source: {{BinPackName}}.tar.gz
Requires: coreutils %{install_info_cmd}
Provides: ciao-{{CiaoPathVersion}}
BuildRequires: mktemp coreutils findutils gcc make emacs
#BuildRoot: %{_tmppath}/%{name}-%{version}-%{release}-root
BuildRoot: %(mktemp -ud %{_tmppath}/%{name}-%{version}-%{release}-XXXXXX)

%define ciaodocdir %{_defaultdocdir}/%{name}

%description
Ciao is a public domain next generation multi-paradigm programming
environment with a unique set of features:

 * A complete Prolog system, supporting ISO-Prolog.

 * Support for both restricting and extending the language. Restrictions
   and extensions can be activated separately on each program module so
   that several extensions can coexist in the same application for
   different modules.

 * Support for programming with functions, higher-order (with predicate
   abstractions), constraints, and objects, as well as feature terms
   (records), persistence, several control rules (breadth-first search,
   iterative deepening, ...), concurrency (threads/engines), a good base
   for distributed execution (agents), and parallel execution. Libraries
   also support WWW programming, sockets, external interfaces (C, Java,
   TclTk, relational databases, etc.), etc.

 * Support for programming in the large with a robust module/object
   system, module-based separate/incremental compilation (automatically
   --no need for makefiles), an assertion language for declaring
   (optional) program properties (including types and modes, but also
   determinacy, non-failure, cost, etc.), automatic static inference and
   static/dynamic checking of such assertions, etc.

 * Support for programming in the small producing small executables
   (including only those builtins used by the program) and for writing
   scripts in Prolog.

 * The environment includes a classical top-level and a rich emacs
   interface with an embeddable source-level debugger and a number of
   execution visualization tools.

 * The Ciao compiler (which can be run outside the top level shell)
   generates several forms of architecture-independent and standalone
   executables, which run with speed, efficiency and executable size
   which are very competitive with other commercial and academic
   Prolog/CLP systems. Library modules can be compiled into compact
   bytecode or C source files, and linked statically, dynamically, or
   autoloaded.

 * The novel modular design of Ciao enables, in addition to modular
   program development, effective global program analysis and static
   debugging and optimization via source to source program
   transformation. These tasks are performed by the Ciao preprocessor
   (ciaopp).

 * An automatic documentation generator for LP/CLP programs (lpdoc). It
   processes Prolog files adorned with (Ciao) assertions and
   machine-readable comments and generates manuals in many formats
   including postscript, pdf, texinfo, info, HTML, man, etc. , as well
   as on-line help, ascii README files, entries for indices of manuals
   (info, WWW, ...), and maintains WWW distribution sites.

%prep

%setup -q -n {{VersionedPackName}}

%build

./ciao-boot.sh configure \
   --instype=global --install_prefix=%{_prefix} \
   --core:update_bashrc=no --core:update_cshrc=no \
   --ciao_emacs:with_emacs_mode=yes --core:update_dotemacs=no \
   --ciao_emacs:emacs_site_start=%{emacs_sitestart_dir} \
   --ciao_emacs:emacsinitfile=%{emacs_sitestart_filename} \
   --core:with_mysql=%{?with_mysql}%{!?with_mysql:no} \
   --contrib:with_ppl=no \
   --lpdoc:docdir=%{ciaodocdir} \
   --lpdoc:mandir=%{_mandir} --lpdoc:infodir=%{_infodir} \
   --lpdoc:htmldir=%{ciaodocdir}/html \
   --core:pillow_base_htmldir=/tmp \
   --core:install_prolog_name=no \
   --execmode=755 --datamode=644
./ciao-boot.sh build --bin
#   --ciao_java:with_java_interface=%{?with_java_interface}%{!?with_java_interface:no} \
#   --ciao_gsl:with_gsl=%{?with_gsl}%{!?with_gsl:no}

%install
rm -rf %{buildroot}
./ciao-boot.sh install --destdir=%{buildroot}

# These are unnecessary in an RPM package:
rm -rf %{buildroot}/tmp # Pillow Web images
rm -rf %{buildroot}%{ciaodocdir}/dir %{buildroot}%{ciaodocdir}/html
rm -f %{buildroot}%{_libdir}/ciao/DOT*
rm -f %{buildroot}%{_infodir}/dir

mkdir -p %{buildroot}%{_mandir}/man1

{{BundleMoveMans}}

# Integrate .infoindex entries into .info documents so that install-info
# works with them without non-portable arguments:

{{BundleIntegrateInfoindexes}}

# Now we don't need the .infoindex files anymore:
rm -f %{buildroot}%{ciaodocdir}/*.infoindex

%clean
rm -rf %{buildroot}

%post
if type install-info >/dev/null 2>&1
then
{{BundleInstallInfoCmds}}
fi

%if %{vendor_independent}
# %{emacs_sitestart_dir} defaults to Fedora/RedHat. If we want a single
# RPM package that works everywhere this takes care of other systems:
if [ -f /etc/SuSE-release ]
then ln -sf %{emacs_sitestart_dir}/%{emacs_sitestart_filename} \
	%{_datadir}/emacs/site-lisp/suse-start-ciao.el
elif [ -d /etc/emacs/site-start.d -a \
	! -e /etc/emacs/site-start.d/50ciao-mode-init.el ]
then ln -s %{emacs_sitestart_dir}/%{emacs_sitestart_filename} \
        /etc/emacs/site-start.d/50ciao-mode-init.el
fi
%endif

%preun
if type install-info >/dev/null 2>&1
then
{{BundleInstallInfoCmdsRemove}}
fi

%if %{vendor_independent}
# %{emacs_sitestart_dir} defaults to Fedora/RedHat. If we want a
# single RPM package that works everywhere this takes care of other systems:
if [ -L %{_datadir}/emacs/site-lisp/suse-start-ciao.el ]
then rm -f %{_datadir}/emacs/site-lisp/suse-start-ciao.el
elif [ -L /etc/emacs/site-start.d/50ciao-mode-init.el ]
then rm -f /etc/emacs/site-start.d/50ciao-mode-init.el
fi
%endif

#%verifyscript

# Omitting the main files section precludes the creation of the main Ciao.rpm

%files
%defattr(-,root,root,-)

# wildcards are necessary for the package not to own the directories
%{_bindir}/*
%{_libdir}/ciao/*.el*
{{BundleFiles}}
%dir %{ciaodocdir}
%{_mandir}/*/*
%{_infodir}/*
%{_includedir}/*
%config %{emacs_sitestart_dir}/%{emacs_sitestart_filename}

# Entries should only mention user-visible changes:
%changelog
* Tue Oct 11 2011 Ciao development team <ciao@clip.dia.fi.upm.es>
- Check the documentation or visit http://ciao-lang.org for the
  release notes for this version.

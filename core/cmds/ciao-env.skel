#!/bin/sh
#
#  ciao-env
#
#  Setup environment for shells
#
#  Copyright (C) 2017 Ciao Developer Team
#

# NOTE: Keep this command fast and portable (e.g., it may be included
# from dot shell files shared among different architectures).

# Physical directory where the script is located
_base=$(e=$0;while test -L "$e";do d=$(dirname "$e");e=$(readlink "$e");\
        cd "$d";done;cd "$(dirname "$e")";pwd -P)

# ---------------------------------------------------------------------------
# Paths for CIAOROOT

# ({{Var}} filled from .hooks.pl)
ciaoroot={{CiaoRoot}}
engmainmod={{EngMainMod}}

# (do not change the following line! see prebuilt_boot.sh)
reloc=no

# TODO: use _base to detect paths and relocation?

# ---------------------------------------------------------------------------
# Add paths
#
# This adds to PATH,MANPATH,INFOPATH the paths corresponding to the
# bin/ and doc/ directories for detected CIAOROOT and CIAOPATH. Paths
# are added even if directories do not exist yet (e.g.,
# ~/.ciao/build/bin is added even if the user has not installed any
# bundle via 'ciao get').

# Return path:old2, where old2 is old where path is removed, or just
# path if old is empty
concat_nodup() { # path old
    if [ x"$2" = x"" ]; then
	printf "%s" "$1"
    else
	printf "%s" "$1":$(printf "%s" "$2" | sed -e s:'\:'"$1"::g)
    fi
}

# Add path to PATH
add_bindir() { # dir
    PATH=$(concat_nodup "$1" "$PATH")
}
# Add path to INFOPATH
add_infodir() { # dir
    if [ "${INFOPATH:-0}" = "0" ]; then
	INFOPATH=/usr/info:/usr/share/info:/usr/local/info
    fi
    INFOPATH=$(concat_nodup "$1" "$INFOPATH")
}
# Add path to MANPATH
add_mandir() { # dir
    MANPATH=$(concat_nodup "$1" "$MANPATH")
}

# ---------------------------------------------------------------------------
# Get paths from a given workspace

treat_wksp() {
    add_bindir "$1/build/bin"
    add_infodir "$1/build/doc"
    add_mandir "$1/build/doc"
}

# ---------------------------------------------------------------------------
# Get paths from CIAOROOT or CIAOPATH

treat_ciaoroot() {
    treat_wksp "$ciaoroot"
}

treat_ciaopath() {
    if [ x"$CIAOPATH" = x"" ]; then
	curr_ciaopath=$HOME/.ciao # Use default (even if it does not exist)
    else
	curr_ciaopath=$CIAOPATH
    fi
    # We split the path by changing IFS
    IFS=: treat_ciaopath_1
}
treat_ciaopath_1() {
    revpath=
    for i in $curr_ciaopath; do # reverse
	revpath=$i':'$revpath
    done
    revpath=$(printf "%s" "$revpath" | sed -e s:'\:$'::g) # remove last :
    treat_ciaopath_2 $revpath
}
treat_ciaopath_2() {
    unset IFS # get back to normal IFS
    for i in "$@"; do
	treat_wksp "$i"
    done
}

# ---------------------------------------------------------------------------
# Generate commands that change the environment

epilogue_sh() {
    cat <<EOF
#
# Run this command to setup your environment:
#   eval "\$(ciao-env --sh)"
EOF
}
epilogue_csh() {
    # NOTE: tcsh/csh cannot eval comments. The trick to write
    #   something that looks like a comment in tcsh is using the ':'
    #   command (which requires quoting!): E.g.,
    #     : 'this is a comment';
    #   That is not valid in csh. So we will just echo and redirect to
    #   /dev/null.
    cat <<EOF
echo '' > /dev/null;
echo 'Run this command to setup your environment:' > /dev/null;
echo '  eval \`ciao-env --csh\`' > /dev/null;
EOF
}

# TODO: $2 is not escaped, do not use %q (not POSIX)
env_sh() { # var value
    printf "export %s=\"%s\"\n" "$1" "$2"
}
env_csh() { # var value
    printf "setenv %s \"%s\";\n" "$1" "$2"
}

gen_env() { # tgtshell
    # Compute new environment
    treat_ciaoroot
    treat_ciaopath
    # Print commands to change environment
    env_"$1" PATH "$PATH"
    env_"$1" MANPATH "$MANPATH"
    env_"$1" INFOPATH "$INFOPATH"
    if [ $reloc = yes ]; then
	env_"$1" CIAOENGINE "$ciaoroot/build/eng/$engmainmod/objs/$engmainmod"
	env_"$1" CIAOHDIR "$ciaoroot/build/eng/$engmainmod/include"
	# TODO: Do not use! define CIAOROOT instead
	env_"$1" CIAOLIB "$ciaoroot/core"
    fi
    epilogue_"$1"
}

# # (for multi-architecture support sharing installation paths)
# # Setting engine related paths: 
# # 
# # Setting this variable allows you to run the same Ciao executables in
# # different architectures, provided you have compiled and installed
# # the corresponding engine (and libraries, if the executable is not
# # static and/or .so libraries are used).
# #
# if [ ${CIAOOS:-0} = 0 ] ; then
#     CIAOOS=`ciao_sysconf --os` ; export CIAOOS
# fi
# if [ ${CIAOARCH:-0} = 0 ] ; then
#     CIAOARCH=`ciao_sysconf --arch` ; export CIAOARCH
# fi

# ---------------------------------------------------------------------------
# Parse options and run

tgtshell=sh
while [ $# -gt 0 ]; do
    case "$1" in
	--sh|--bash) tgtshell=sh ;;
	--csh|--tcsh) tgtshell=csh ;;
	*) 
	    cat <<EOF 
ERROR: Unrecognized option $1
EOF
	    exit 1
	    ;;
    esac
    shift
done
gen_env $tgtshell

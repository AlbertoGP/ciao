This describes the installation procedure for the Ciao system,
including libraries and manuals, from a @em{source} distribution.
For more specific details, please read also the @tt{INSTALLATION} file
that comes with each component of Ciao. However, in most cases
following this summary suffices.

@section{Requirements}

A minimal build requires:
@begin{itemize}
@item A computing device running a supported operating system (Linux,
  BSD, macOS, Windows, Android).
@item A supported architecture (@tt{amd64}, @tt{x86}, @tt{arm}).
@item A relatively modern C compiler (GCC or clang).
@item A POSIX-like environment.
@end{itemize}

Although Ciao implements its own build system, the @concept{GNU}
implementation of the @concept{make} command is (still)
used internally. If any of the installation steps stop right away with
@apl{make} error messages, you probably need to install @tt{gmake}.

Installing @href{https://www.gnu.org/software/emacs/}{@bf{Emacs}} is highly
recommended: the Ciao distribution includes a very powerful
@cindex{development environment} @em{application development
environment} which is based on @apl{emacs} and which enables, e.g.,
syntax coloring, source code formatting, embedded top-level,
source-level debugging, context-sensitive on-line help, etc.

In any case, it is easy to use Ciao from a terminal and edit code with
any editor of your choice. The top level includes some minimal editing
facilities when @href{https://github.com/hanslub42/rlwrap}{rlwrap} is
available.

Finally, documentation generation in PDF format requires TeX and
ImageMagick.

@subsection{Installing dependencies}

Depending on the operating system and package management tool, you may
need to install the following dependencies (using @tt{sudo} or as
administrator or @tt{root} user):

@begin{itemize}
@item Debian/Ubuntu:
@begin{verbatim}
$ apt-get install build-essential
# (optional) for 32 bits compatibility mode (x86)
$ apt-get install gcc-multilib libc6-i386 libc6-dev-i386 g++-multilib
# (optional) for emacs-based IDE
$ apt-get install emacs
# (optional) for line edition from the terminal
$ apt-get install rlwrap
# (optional) for generating documentation in PDF format
$ apt-get install texlive texinfo imagemagick
@end{verbatim}
(valid for both @tt{x86} and @tt{arm} architectures)
	
@item Fedora:
@begin{verbatim}
$ dnf install gcc make which kernel-headers kernel-devel emacs
# (optional) for emacs-based IDE
$ dnf install emacs
# (optional) for 32 bits compatibility mode (x86)
$ dnf install glibc-devel.i686 glibc-devel libstdc++-devel.i686
# (optional) for line edition from the terminal
$ dnf install rlwrap
# (optional) for generating documentation in PDF format
$ dnf install texlive texinfo texinfo-tex ImageMagick
@end{verbatim}
(use @tt{yum} instead of @tt{dnf} above in older versions of Fedora)
	
@item Arch Linux:
@begin{verbatim}
# Optional, upgrade if needed
$ pacman -Syu
# Dependencies for build and development environment
# (base-devel: includes gcc, make, which)
$ pacman -S base-devel linux-headers
# (optional) for 32 bits compatibility mode (x86)
# NOTE: Remember to enable multilib (https://wiki.archlinux.org/index.php/Multilib)
$ pacman -S lib32-glibc lib32-libstdc++5
# (optional) for emacs-based IDE
$ pacman -S emacs
# (optional) for line edition from the terminal
$ pacman -S rlwrap
# (optional) for generating documentation in PDF format
$ pacman -S texlive-core texinfo imagemagick
@end{verbatim}

@item macOS:
@begin{itemize}
@item Install command line tools for Xcode (from the App store)
@item Install emacs and ImageMagick (and texinfo if needed, but recent
    versions of macOS include it). A software management tool like
    homebrew or macports is recommended, e.g. (as root/sudo):
@begin{verbatim}
$ brew install emacs-mac imagemagick
@end{verbatim}
@item Install TexLive. If using homebrew we recommend installing the
      MacTeX distribution, available from:
      @tt{https://www.tug.org/mactex}.
@item Install the following packages:
@begin{verbatim}
# (optional) for line edition from the terminal
$ brew install rlwrap
@end{verbatim}
@end{itemize}
	
@item FreeBSD:
@begin{itemize}
@item Install GCC or clang and the following packages:
@begin{verbatim}
$ pkg install gmake
# (optional) for emacs-based IDE
$ pkg install emacs ImageMagick expat
# NOTE: use emacs-nox and ImageMagick-nox if X11 support is not needed
# (optional) for line edition from the terminal
$ pkg install rlwrap
# (optional) for generating documentation in PDF format
$ pkg install texinfo texlive-full
@end{verbatim}
@end{itemize}

@item NetBSD:
@begin{itemize}
@item Install GCC or clang and the following packages:
@begin{verbatim}
$ pkgin install gmake
# (optional) for emacs-based IDE
$ pkgin install emacs ImageMagick expat
# (optional) for line edition from the terminal
$ pkgin install rlwrap
# (optional) for generating documentation in PDF format
$ pkgin install tex-texinfo texlive-collection-latex
@end{verbatim}
@end{itemize}

@item Windows (using Windows Subsystem or Linux):
@begin{itemize}
@item Install @href{https://docs.microsoft.com/en-us/windows/wsl/install-win10}{WSL}
@item Install some Linux distribution (e.g., Ubuntu) from the Windows Store.
@item Open a @tt{bash} terminal and install the dependencies for the
  selected distribution (see points above), e.g., Debian/Ubuntu.
@end{itemize}
	
@item Android (using the Termux Linux environment):
@begin{itemize}
@item Install @href{https://termux.com/}{Termux}
@item Install the following packages:
@begin{verbatim}
$ pkg install clang make
# (optional) for emacs-based IDE
$ pkg install emacs
# (optional) for line edition from the terminal
$ pkg install rlwrap
@end{verbatim}
@end{itemize}

@end{itemize}
	
@bf{Additional dependencies:}

Some advanced libraries and components require an additional set of
software packages:

@begin{verbatim}
# Debian/Ubuntu:
$ apt-get install g++ libgsl0-dev libgsl0ldbl
$ apt-get install default-jdk ant ant-optional
 
# Fedora:
$ yum install gsl gsl-devel ant gcc-c++
@end{verbatim}

To install the Java JDK on Fedora, please visit Sun Java website
(@tt{http://java.sun.com/javase/downloads/index.jsp}) and follow the
installation instructions there.

@section{Network-based installation}
@cindex{installation, network}

Ciao can be installed from the network using a @tt{curl} pipe from
@tt{https://ciao-lang.org/boot} to @tt{sh} in a terminal. This is
probably the fastest/easiest way to install Ciao from sources.

The network installer is delivered as an HTTPs redirection to
@tt{https://raw.githubusercontent.com/ciao-lang/ciao/master/ciao-boot.sh}
(which contains the latest version of the @tt{ciao-boot.sh} script). The
bootstrap script recognizes that it is being called without sources
automatically. Examples:

@begin{verbatim}
# Interactive installation
curl https://ciao-lang.org/boot -sSfL | sh
# Minimal local installation with prebuilt binaries
curl https://ciao-lang.org/boot -sSfL | sh -s -- --prebuilt-bin local-install
# Full environment
curl https://ciao-lang.org/boot -sSfL | sh -s -- get devenv
# Show network installer help
curl https://ciao-lang.org/boot -sSfL | sh -s -- --help
@end{verbatim}

@section{Quick installation from source}

The source code for the latest stable and development versions of Ciao
is available from @href{https://ciao-lang.org}.

Installation of Ciao from source is driven by the @tt{ciao-boot.sh}
script (@tt{ciao-boot.bat} in Windows), which bootstraps and invokes
the Ciao build system. 
	
@comment{(specially if the installation will be shared by different architectures)}
@noindent @bf{Note}: It is recommended that you read the full
installation instructions. However, in most cases following this
summary suffices:

@begin{enumerate}

@item Type @tt{./ciao-boot.sh configure}. This command will attempt to
      detect the configuration options for your system automatically
      and select reasonable defaults.

      Options can be configured interactively using @tt{./ciao-boot.sh
      configure --interactive} or passed explicitly as arguments from
      the command-line (see @tt{./ciao-boot.sh help} for more
      information). In particular, make sure the location of the
      @apl{emacs} executable is set correctly.

@item Type @tt{./ciao-boot.sh build}. This will build executables,
      compile libraries, and generate the documentation.

@item Type @tt{./ciao-boot.sh install}. This will install everything in
	the specified directories.
@end{enumerate}

Alternatively, @tt{ciao-boot.sh} provides shorthands to perform
configure, build, and install in a single command:

 @begin{enumerate}
 @item Type @tt{./ciao-boot.sh local-install}. This will do a user-local
       installation (that will be accessible just for your user).

 @item Type @tt{./ciao-boot.sh global-install}. This will do a
       system-wide installation (e.g., as administrator or @tt{root}
       user).
 @end{enumerate}

The system will include appropriate code at the end of your startup
scripts. This will make the documentation and executables accessible,
make sure the correct mode is set when opening Ciao source files in
@apl{emacs}, etc.

If you need more advanced control of the configuration please read the
following sections.

@section{Full installation instructions}
@cindex{installation, full instructions}

@comment{
@item @bf{Uncompress and unpackage:} (using @apl{gunzip} and @tt{tar
      -xpf}) @cindex{tar} the distribution in a suitable
      directory. This will create a new directory called
      @tt{ciao-X.Y}, where @tt{X.Y} is the version number of the
      distribution.  The @tt{-p} option in the @apl{tar} command
      ensures that the relative dates of the files in the package are
      preserved, which is needed for correct incremental compilation.}
	
@begin{enumerate}

@item @bf{Select installation options:} From the directory where the
      sources are stored, run:

@begin{verbatim}
./ciao-boot.sh configure
@end{verbatim}

      It will perform a default configuration, where the system will
      be configured to run from the sources directly, and configured
      in the user's home directory (recommended for Ciao developers or
      users without admin rights).

      The option @tt{--instype=global} will prepare Ciao to be
      installed as the system administrator (@tt{root}) in a standard
      directory available for all users in the machine (e.g.,
      @tt{/usr/local}).

      For 32-bit builds in 64-bit architectures use the
      @tt{--core:m32=yes} configuration flag.

      In case you want to install elsewhere, or change any of the
      installation options, you can use a customized configuration
      procedure (see @tt{./ciao-boot.sh help} for more information). The
      meaning of some important options is as follows:

 @begin{itemize}

       @item @tt{--prefix}: prefix for the default values of
       installation directories (@tt{<prefix>/bin}, @tt{<prefix>/lib},
       etc).

       @item @tt{--bindir}: directory where the Ciao commands will be
       installed. For example, if @tt{--bindir} is set to
       @tt{/usr/local/bin}, then the Ciao @concept{compiler}
       (@apl{ciaoc}) will be stored at
       @tt{/usr/local/bin/ciaoc}. Actually, it will be a link to
       @tt{ciaoc-}@em{VersionNumber}. This applies also to other
       executables below and is done so that several versions of Ciao
       can coexist on the same machine.  Note that the @em{version
       installed latest} will be the one started by default when
       typing @tt{ciao}, @tt{ciaoc}, etc.  @cindex{binary directory}

       @item The Ciao installation procedure will create a new
       subdirectory @tt{ciao/<vers>} denoted @tt{INSTALL_CIAOROOT}
       below @tt{--prefix}. The @tt{<vers>} directory indicate the
       Ciao system version. It allows having several Ciao versions
       installed simultaneously.

       @item @tt{--mandir}: directory where the @concept{manuals} in
       @apl{man} format will be installed.

       @item @tt{--infodir}: directory where the @concept{manuals} in
       @apl{info} format will be installed.

@end{itemize}

@item @bf{Build Ciao:} At the ciao top level
      directory type @tt{./ciao-boot.sh build}.

@comment{
      This will:

      @begin{itemize}

      @item Build an @concept{engine}. The engine is the actual
            interpreter of the low level code into which Ciao programs
            are compiled.

      @item Build a new Ciao @concept{standalone compiler}
            (@apl{ciaoc}), with the default paths set for your local
            configuration (nonetheless, these can be overridden by
            environment variables, as described below).

      @item Compile a toplevel @concept{Ciao shell} and a shell for
            @concept{Ciao scripts}, @cindex{scripts} under the
            @tt{<CIAOSRC>/shell} directory.

      @item Compile auxiliary applications (documented in the part of
            the manual on 'Miscellaneous Standalone Utilities').

      @item Precompile all the libraries using this compiler.

      @item Generate the manuals.

      @end{itemize}

@item @bf{Check compilation:} If the above steps have been
      satisfactorily finished, the compiler has compiled itself and
      all the distribution modules, and very probably everything is
      fine.
}
@item @bf{Install Ciao:} To install Ciao in the directories selected
      in the configuration script during step 2 above, type
      @tt{./ciao-boot.sh install}. This will:

      @begin{itemize}

      @item Install the executables of the Ciao @concept{program
            development tools} (i.e., the general driver/top-level
            @apl{ciao}, the standalone compiler @apl{ciaoc}, the
            script interpreter @apl{ciao-shell}, miscellaneous
            utilities, etc.) in the selected binary directory. In
            order to use these tools, make sure that the @tt{PATH}
            @cindex{PATH} @concept{environment variable} contains such
            path.

      @item Install the Ciao libraries under @tt{INSTALL_CIAOROOT} (these
            will be automatically found).

      @item Install the Ciao manuals in several formats (such as GNU
            @tt{info}, @tt{html}, @tt{pdf}, etc.) under
            @tt{INSTALL_CIAOROOT} and other documentation-specific
            paths. In order for these manuals to be found when typing
            @tt{M-x info} within @apl{emacs}, or by the standalone
            @apl{info} and @apl{man} commands, the @tt{MANPATH}
            @cindex{MANPATH} and @tt{INFOPATH} @cindex{INFOPATH}
            @concept{environment variables} of users both need to
            contain the path specified at @tt{--mandir} and
            @tt{--infodir}. Documentation in other formats can be
            accesed with the @tt{ciao doc} command.

      @item Install under @tt{INSTALL_CIAOROOT} the Ciao interface
            with GNU @apl{emacs} (which provides an interactive
            interface to the Ciao program development tools, as well
            as some other auxiliary files).

      @end{itemize}

@item @bf{Set up user environments:} The installation process will
      modify the startup files automatically by default. If you
      disable this option in the configuration or you wish to switch
      between different installations, it would be necessary to modify
      the startup files manually.

      The installation process generates a @apl{ciao-env} command to
      update the environments for @apl{sh}-like and @apl{csh}like
      shells. It also generates a @tt{INSTALL_CIAOROOT/ciao-mode-init}
      (for emacs) with appropriate definitions which will take care of
      all needed @concept{environment variable definitions} and
      @concept{emacs mode setup}.

      @include{UserSetup.lpdoc}

      If you are installing Ciao globally in a multi-user machine,
      make sure that you instruct all users that to do the same.  If
      you are the system administrator, the previous steps can be done
      once and for all, and globally for all users by including the
      lines above in the central startup scripts (e.g., in Linux
      @file{/etc/bashrc}, @file{/etc/csh.login},
      @file{/etc/csh.cshrc}, @file{/etc/skel},
      @file{/usr/share/emacs/.../lisp/site-init.pl}, etc.).

@item @bf{Check installation / read documentation:} You may now want
      to check your installation (see @ref{Checking for correct
      installation}) and read the documentation. There are
      special ``getting started'' sections at the beginning of the
      manual.

@end{enumerate}

If you have any problems you may want to check @ref{Troubleshooting}.

@section{Uninstalling}
@cindex{uninstalling}

The system can be @em{uninstalled} by typing @tt{./ciao-boot.sh
uninstall} in the top directory. To ensure that this process works,
configuration should have not changed since installation, so that the
same directories are cleaned.

@section{Checking for correct installation}
@cindex{installation, checking the}

If everything has gone well, several applications and tools should be
available to a normal user.  Try the following while logged in as a
@em{normal user} (important in order to check that permissions are set
up correctly):

@include{InstallTest.lpdoc}

Finally, if @apl{emacs} is installed, after starting it (typing
@tt{emacs}) the following should work:

@include{EmacsTesting.lpdoc}

@section{Cleaning up the source directory}

After (global) installation, the source directory can be cleaned up 
using @tt{./ciao-boot.sh realclean}, leaves the distribution is its
original form, throwing away any intermediate files (as well as
any unneeded files left behind by the Ciao developers), while
still allowing recompilation.

@section{Environment variables used by Ciao executables}

The executables generated by the Ciao compiler (including the ciao
development tools themselves) locate automatically where the Ciao
engine and libraries have been installed, since those paths are stored
as defaults in the engine and compiler at installation time. Thus,
there is no need for setting any environment variables in order to
@em{run} Ciao executables (on a single architecture -- see
@ref{Multiarchitecture installation} for running on multiple
architectures).

However, the default paths can be overridden by using the environment
variable @tt{CIAOROOT}, which tell the Ciao executables where to look
for engines and system libraries.

@section{Multiarchitecture installation}
@cindex{multiarchitecture installation}

@comment{
    For network-based installations, @cindex{installation, network
    based} it is of @em{utmost importance} that the configured paths
    be reachable in all the networked machines.  Different machines
    with different architectures can share the same physical source
    directory during installation, since compilations for different
    architectures take place in dedicated subdirectories. Also,
    different machines/architectures can share the same
    @tt{INSTALL_CIAOROOT} directory. This saves space since the
    architecture-independent libraries will be shared. See
    @ref{Multiarchitecture installation} below.

    Only the engine and some small parts of the libraries (those
    written in @concept{C}) differ from one architecture to the other.
    Standard Ciao code compiles into @concept{bytecode object files}
    (@tt{.po}) and/or @concept{executables} which are portable among
    machines of different architecture, provided there is an
    executable engine accessible in every such machine.
}

In order to perform a multi-architecture installation, it is possible
to repeat successively the build and installation process for several
architectures from different machines sharing part of their
filesystem.

The Ciao build and installation process maintains separate name spaces
for platform- and architecture-dependant binaries (like the engine
binary, or @tt{.so} or @tt{.dll} gluecode files for the foreign
interface).  Portable Ciao applications (i.e., except self-contained
standalone executables) can run on several machines with different
architectures without any need for recompiling, provided the Ciao
engine and libraries are correctly installed.

@comment{Ciao applications (including the compiler and the top level)
can run on several machines with different architectures without any
need for recompiling, provided the Ciao engine (compiled for the
corresponding architecture) accessible in each machine. Also, the Ciao
libraries (installed in @tt{INSTALL_CIAOROOT}, which contain also the
engines) and the actual binaries (installed in the directory specified
by @tt{--bindir}) can themselves be shared on several machines with
different architectures.}  @comment{, saving disk space.}

@comment{
For example, assume that the compiler is installed as:

@tt{/usr/local/share/bin/ciaoc}

and the libraries are installed under

@tt{/usr/local/share/lib}

Assume also that the @tt{/usr/local/share} directory is mounted on,
say, a number of (physical or virtual) @concept{Linux} and a number of
@concept{Solaris} boxes. In order for @tt{ciaoc} to run correctly on
both types of machines, the following is needed:

@begin{enumerate}

@item Make sure you that have done @tt{./ciao-boot.sh install} on one machine
      of each architecture (once for Linux and once for Solaris in our
      example).  This recompiles and installs a new engine and any
      architecture-dependent parts of the libraries for each
      architecture. The engines will have names such as
      @tt{ciaoengine.<CIAOOS><CIAOARCH>}.

@item In multi-architecture environments it is even more important to
      make sure that users make the modifications to their startup
      scripts. The selection of the engine (and architecture-dependent
      parts of libraries) is done by setting the environment variables
      @tt{CIAOOS} and @tt{CIAOARCH}, using the values given by the
      @tt{ciao_sysconf} command, which is installed automatically when
      installing Ciao.

      However, note that this is not strictly necessary if running on
      only one architecture: if @tt{CIAOOS} and @tt{CIAOARCH} are not
      set (i.e., undefined), the Ciao executables will look simply for
      @tt{ciaoengine}, which is always a link to the latest engine
      installed in the libraries. But including the initialization
      files provided has the advantage of setting also paths for the
      manuals, etc.  @end{enumerate} }

